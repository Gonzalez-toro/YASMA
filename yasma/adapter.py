## Adapter finding utility

import sys
# import argparse
from math import floor

import click
from click_option_group import optgroup

import click
from pathlib import Path
from os.path import isfile, isdir
from time import time, sleep
from collections import Counter, deque
from itertools import count, chain
from statistics import median, mean
from pprint import pprint


from .generics import *
from .cli import cli



@cli.command(group='Processing', help_priority=2)


@optgroup.group('\n  Basic options',
				help='')

@optgroup.option("-ul", "--untrimmed_libraries", 
	required=False, 
	type=click.UNPROCESSED, callback=validate_glob_path,
	multiple=True,
	help='Path to untrimmed libraries. Accepts wildcards (*).')

@optgroup.option("-o", "--output_directory", 
	# default=f"Annotation_{round(time())}", 
	required=True,
	type=click.Path(),
	help="Directory name for annotation output.")


@optgroup.group('\n  Optional settings',
				help='')

@optgroup.option('-n', 
	required=False,
	default= 100000, 
	type=int,
	help="Number of reads to check for adapter (default 10,000)")

@optgroup.option('--override', is_flag=True, default=False, help='Overrides config file changes without prompting.')


def adapter(**params):
	'''Tool to check untrimmed-libraries for 3' adapter content.'''


	rc = requirementClass()
	rc.check()

	ic = inputClass(params)
	ic.check(['untrimmed_libraries'])


	output_directory        = ic.output_directory
	untrimmed_libraries     = ic.inputs['untrimmed_libraries']

	n                       = params['n']

	kmer_size = 8


	adapter_dir = Path(output_directory, "adapter")
	adapter_dir.mkdir(parents=True, exist_ok=True)
	

	log_file = Path(output_directory,"adapter/log.txt")

	sys.stdout = Logger(log_file)




	common_adapters = {
	'Reverse_adapter' : 'AGATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Universal_Adapter' : 'AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT',
	'pcr_dimer' : 'AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCTAGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG',
	'PCR_Primers' : 'AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCTCAAGCAGAAGACGGCATACGAGCTCTTCCGATCT',
	'TruSeq_Adapter_Index_1_6' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_2' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACCGATGTATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_3' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACTTAGGCATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_4' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACTGACCAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_5' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_6' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGCCAATATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_7' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACCAGATCATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_8' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACACTTGAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_9' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGATCAGATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_10' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACTAGCTTATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_11' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGGCTACATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_12' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACCTTGTAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_13' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACAGTCAACAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_14' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACAGTTCCGTATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_15' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACATGTCAGAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_16' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACCCGTCCCGATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_18_7' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGTCCGCACATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_19' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGTGAAACGATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_20' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGTGGCCTTATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_21' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGTTTCGGAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_22' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACCGTACGTAATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_23' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACGAGTGGATATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_25' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACACTGATATATCTCGTATGCCGTCTTCTGCTTG',
	'TruSeq_Adapter_Index_27' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCACATTCCTTTATCTCGTATGCCGTCTTCTGCTTG',
	'I5_Nextera_Transposase_1' : 'CTGTCTCTTATACACATCTGACGCTGCCGACGA',
	'I7_Nextera_Transposase_1' : 'CTGTCTCTTATACACATCTCCGAGCCCACGAGAC',
	'I5_Nextera_Transposase_2' : 'CTGTCTCTTATACACATCTCTGATGGCGCGAGGGAGGC',
	'I7_Nextera_Transposase_2' : 'CTGTCTCTTATACACATCTCTGAGCGGGCTGGCAAGGC',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]501' : 'GACGCTGCCGACGAGCGATCTAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]502' : 'GACGCTGCCGACGAATAGAGAGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]503' : 'GACGCTGCCGACGAAGAGGATAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]504' : 'GACGCTGCCGACGATCTACTCTGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]505' : 'GACGCTGCCGACGACTCCTTACGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]506' : 'GACGCTGCCGACGATATGCAGTGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]507' : 'GACGCTGCCGACGATACTCCTTGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]508' : 'GACGCTGCCGACGAAGGCTTAGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_and_Nextera_Enrichment_[N/S/E]517' : 'GACGCTGCCGACGATCTTACGCGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N701' : 'CCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N702' : 'CCGAGCCCACGAGACCGTACTAGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N703' : 'CCGAGCCCACGAGACAGGCAGAAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N704' : 'CCGAGCCCACGAGACTCCTGAGCATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N705' : 'CCGAGCCCACGAGACGGACTCCTATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N706' : 'CCGAGCCCACGAGACTAGGCATGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N707' : 'CCGAGCCCACGAGACCTCTCTACATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N708' : 'CCGAGCCCACGAGACCAGAGAGGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N709' : 'CCGAGCCCACGAGACGCTACGCTATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N710' : 'CCGAGCCCACGAGACCGAGGCTGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N711' : 'CCGAGCCCACGAGACAAGAGGCAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_and_Nextera_Enrichment_N712' : 'CCGAGCCCACGAGACGTAGAGGAATCTCGTATGCCGTCTTCTGCTTG',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S502' : 'GACGCTGCCGACGAATAGAGAGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S503' : 'GACGCTGCCGACGAAGAGGATAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S505' : 'GACGCTGCCGACGACTCCTTACGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S506' : 'GACGCTGCCGACGATATGCAGTGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S507' : 'GACGCTGCCGACGATACTCCTTGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S508' : 'GACGCTGCCGACGAAGGCTTAGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S510' : 'GACGCTGCCGACGAATTAGACGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S511' : 'GACGCTGCCGACGACGGAGAGAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S513' : 'GACGCTGCCGACGACTAGTCGAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S515' : 'GACGCTGCCGACGAAGCTAGAAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S516' : 'GACGCTGCCGACGAACTCTAGGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S517' : 'GACGCTGCCGACGATCTTACGCGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S518' : 'GACGCTGCCGACGACTTAATAGGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S520' : 'GACGCTGCCGACGAATAGCCTTGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S521' : 'GACGCTGCCGACGATAAGGCTCGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I5_Primer_Nextera_XT_Index_Kit_v2_S522' : 'GACGCTGCCGACGATCGCATAAGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N701' : 'CCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N702' : 'CCGAGCCCACGAGACCGTACTAGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N703' : 'CCGAGCCCACGAGACAGGCAGAAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N704' : 'CCGAGCCCACGAGACTCCTGAGCATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N705' : 'CCGAGCCCACGAGACGGACTCCTATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N706' : 'CCGAGCCCACGAGACTAGGCATGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N707' : 'CCGAGCCCACGAGACCTCTCTACATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N710' : 'CCGAGCCCACGAGACCGAGGCTGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N711' : 'CCGAGCCCACGAGACAAGAGGCAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N712' : 'CCGAGCCCACGAGACGTAGAGGAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N714' : 'CCGAGCCCACGAGACGCTCATGAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N715' : 'CCGAGCCCACGAGACATCTCAGGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N716' : 'CCGAGCCCACGAGACACTCGCTAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N718' : 'CCGAGCCCACGAGACGGAGCTACATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N719' : 'CCGAGCCCACGAGACGCGTAGTAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N720' : 'CCGAGCCCACGAGACCGGAGCCTATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N721' : 'CCGAGCCCACGAGACTACGCTGCATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N722' : 'CCGAGCCCACGAGACATGCGCAGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N723' : 'CCGAGCCCACGAGACTAGCGCTCATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N724' : 'CCGAGCCCACGAGACACTGAGCGATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N726' : 'CCGAGCCCACGAGACCCTAAGACATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N727' : 'CCGAGCCCACGAGACCGATCAGTATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N728' : 'CCGAGCCCACGAGACTGCAGCTAATCTCGTATGCCGTCTTCTGCTTG',
	'I7_Primer_Nextera_XT_Index_Kit_v2_N729' : 'CCGAGCCCACGAGACTCGACGTCATCTCGTATGCCGTCTTCTGCTTG',
	'I5_Adapter_Nextera' : 'CTGATGGCGCGAGGGAGGCGTGTAGATCTCGGTGGTCGCCGTATCATT',
	'I7_Adapter_Nextera_No_Barcode' : 'CTGAGCGGGCTGGCAAGGCAGACCGATCTCGTATGCCGTCTTCTGCTTG',
	'Nextera_LMP_Read1_External_Adapter' : 'GATCGGAAGAGCACACGTCTGAACTCCAGTCAC',
	'Nextera_LMP_Read2_External_Adapter' : 'GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT',
	'RNA_Adapter_(RA5)_part_#_15013205' : 'GATCGTCGGACTGTAGAACTCTGAAC',
	'RNA_Adapter_(RA3)_part_#_15013207' : 'CCTTGGCACCCGAGAATTCCA',
	'Stop_Oligo_(STP)_8' : 'CCACGGGAACGTGGTGGAATTC',
	# 'RNA_RT_Primer_(RTP)_part_#_15013981' : 'TGGAATTCTCGGGTGCCAAGGC',
	# 'RNA_PCR_Primer_(RP1)_part_#_15013198' : 'TCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT',
	# 'RNA_PCR_Primer_Index_1_(RPI1)_2,9' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_2_(RPI2)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCGATGTATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_3_(RPI3)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTTAGGCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_4_(RPI4)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTGACCAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_5_(RPI5)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_6_(RPI6)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGCCAATATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_7_(RPI7)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCAGATCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_8_(RPI8)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACACTTGAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_9_(RPI9)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGATCAGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_10_(RPI10)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAGCTTATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_11_(RPI11)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGGCTACATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_12_(RPI12)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCTTGTAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_13_(RPI13)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACAGTCAAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_14_(RPI14)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACAGTTCCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_15_(RPI15)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACATGTCAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_16_(RPI16)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCCGTCCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_17_(RPI17)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGTAGAGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_18_(RPI18)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGTCCGCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_19_(RPI19)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGTGAAAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_20_(RPI20)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGTGGCCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_21_(RPI21)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGTTTCGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_22_(RPI22)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCGTACGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_23_(RPI23)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGAGTGGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_24_(RPI24)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGGTAGCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_25_(RPI25)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACACTGATATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_26_(RPI26)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACATGAGCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_27_(RPI27)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACATTCCTATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_28_(RPI28)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCAAAAGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_29_(RPI29)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCAACTAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_30_(RPI30)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCACCGGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_31_(RPI31)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCACGATATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_32_(RPI32)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCACTCAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_33_(RPI33)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCAGGCGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_34_(RPI34)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCATGGCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_35_(RPI35)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCATTTTATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_36_(RPI36)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCCAACAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_37_(RPI37)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCGGAATATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_38_(RPI38)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCTAGCTATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_39_(RPI39)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCTATACATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_40_(RPI40)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACCTCAGAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_41_(RPI41)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACGACGACATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_42_(RPI42)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTAATCGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_43_(RPI43)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTACAGCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_44_(RPI44)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTATAATATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_45_(RPI45)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTCATTCATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_46_(RPI46)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTCCCGAATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_47_(RPI47)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTCGAAGATCTCGTATGCCGTCTTCTGCTTG',
	# 'RNA_PCR_Primer_Index_48_(RPI48)' : 'TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTCGGCAATCTCGTATGCCGTCTTCTGCTTG',
	# 'PhiX_read1_adapter' : 'AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTGAAA',
	# 'PhiX_read2_adapter' : 'AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAA',
	# 'Bisulfite_R1' : 'AGATCGGAAGAGCACACGTCTGAAC',
	# 'Bisulfite_R2' : 'AGATCGGAAGAGCGTCGTGTAGGGA',
	'Illumina Small RNA v1.5 3p Adapter' : 'ATCTCGTATGCCGTCTTCTGCTTG',
	'Illumina RNA 3p Adapter (RA3)' : 'TGGAATTCTCGGGTGCCAAGG',
	'Illumina RNA 5p Adapter (RA5)' : 'GTTCAGAGTTCTACAGTCCGACGATC',
	'Illumina 3p RNA Adapter' : 'TCGTATGCCGTCTTCTGCTTGT',
	"Chen2012 - 3’ non-multiplex adapter (BL1)" : "CTGTAGGCACCATCAAT",
	"Chen2012 - 3’ multiplex adapter" : "CAGATCGGAAGAGCACACGT",
	"Chen2012 - Substrate dA" : "ACTTCGTATGCCGTCTTCTGCTT",
	"Chen2012 - Substrate dT" : "TAGTCGTATGCCGTCTTCTGCTT",
	'Chen2012 - Substrate dC' : 'CTGTCGTATGCCGTCTTCTGCTT',
	'Chen2012 - Non-multiplex RT primer' : 'ATTGATGGTGCCTACAG',
	"Chen2012 - Universal forward PCR primer" : 'AATGATACGGCGACCACCGAGATCTACACGACAGGTTCAGAGTTCTACAGTCCGACGAT',
	"Chen2012 - Multiplex RT primer" : 'ACGTGTGCTCTTCCGATCTG',
	'Chen2012 - Non-multiplex reverse PCR primer': 'CAAGCAGAAGACGGCATACGAGATTGATGGTGCCTACA' ,
	"Chen2012 - Multiplex reverse PCR primers" : "CAAGCAGAAGACGGCATACGAGAT",
	"MYSTERY ADAPTER 1" : "AGTCGGAG",
	"Lu2007 - classic adapter" : "CACTCGGG"}


	left_common_adapters = {}
	for name, seq in common_adapters.items():
		try:
			left_common_adapters[seq[:kmer_size]].append(name)
		except KeyError:
			left_common_adapters[seq[:kmer_size]] = [name]





	def process_file(f, line_base, n):
		seqs = []
		offset = 0

		target_line = n * line_base
		for i, line in enumerate(f):
			
			try:
				line = line.decode('utf-8')
			except AttributeError:
				pass

			if i % line_base == 1:
				seq = line.strip()

				if "N" not in seq:
					seqs.append(seq)
				else:
					offset += line_base


			if i - offset >= target_line:
				return(seqs)

		return(seqs)

	def check_for_trimming(seqs):
		c = Counter()

		for seq in seqs[:1000]:
			c.update([len(seq)])

		if c.most_common()[0][1] < 950:
			return(False)
		return(c.most_common()[0][0])


	adapters = []
	for read_file in untrimmed_libraries:

		print()
		print()
		# print(read_file)
		print("################")

		print(read_file)

		if read_file.suffix == ".gz":
			import gzip
			f = gzip.open(read_file)
		else:
			f = open(read_file)



		if ".fa" in read_file.suffixes or ".fasta" in read_file.suffixes:
			line_base = 2
		elif ".fq" in read_file.suffixes or ".fastq" in read_file.suffixes:
			line_base = 4
		else:
			print(f"file type not recognized: {read_file}")
			sys.exit()

		seqs = process_file(f, line_base, n)
		print("\ntotal seqs: {}".format(len(seqs)))

		f.close()


		read_length = check_for_trimming(seqs)
		pretrim = False
		if not read_length:
			print("Warning: Library is likely already trimmed...")
			pretrim = True

		def count_kmers(seqs):
			kmer_c = Counter()

			for seq in seqs:

				
				kmers = [seq[i:i+kmer_size] for i in range(len(seq) - kmer_size)]

				kmer_c.update(kmers)

			return(kmer_c)

		def test_preceding_base(seq):
			cutoff = 0.75
			counts = []
			bases = ['A','T','G','C']

			for base in bases:
				left_seq = base + seq[:kmer_size-1]
				counts.append(kmer_c[left_seq])

			if sum(counts) == 0:
				return(True)

			# print(counts)

			for i,c in enumerate(counts):
				count_perc = c / sum(counts) 
				if count_perc > cutoff:
					return(f"{bases[i]}{int(count_perc*100)}")

			return('-')


		kmer_c = count_kmers(seqs)

		best = 'None'
		best_perc = 0

		for seq, names in left_common_adapters.items():
			freq = kmer_c[seq]
			perc = round(float(freq) / n * 100, 1)
			# print(freq)


			preceding = test_preceding_base(seq)
			passing = ''
			if perc >= 10:
				passing = " <-"

				if perc > best_perc:
					if preceding == '-':
						best = seq
						best_perc = perc

			try:
				print(seq+passing, freq, perc, preceding, names[0], sep='\t')
			except UnicodeEncodeError:
				print("unknown error...")
			


				# to_print = [seq, freq, perc, test_preceding_base(seq), names[0]]
				# print("\t".join(map(str,to_print)))

				# if seq == 'ATCTCGTA' and not disqualified:
				# 	best = seq
				# 	best_perc = perc

				# 	override=True



		# if not best:
		# 	print("Failed to find best adapter in knowns, trying to identify most common 5' sequence")

		# 	while True:



		print()
		print("Best adapter candidate:")
		# if override:
		# 	print("(percentage overriden due to discovery of known sRNA-seq adapter)")

		print()
		print(best_perc)
		if read_length:
			print(read_length)
		else:
			print(0)

		if best == "None" and pretrim:
			print("PRE-TRIMMED")
			adapters.append('PRE-TRIMMED')
		else:
			print(best)
			adapters.append(best)


	print(untrimmed_libraries)

	if "PRE-TRIMMED" in adapters:
		ic.inputs['trimmed_libraries'] = untrimmed_libraries.copy()


	pprint(adapters)

	print(f"writing {adapters[0]} to config.json")

	ic.inputs['adapter'] = adapters[0]
	ic.write()







